{-# STDLIB_VERSION 5 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

#data params in account
let ps = "PRESALE_START"
let pd = "PRESALE_DURATION"
let cs = "CLAIM_START"
let cd = "CLAIM_DURATION"
let p = "PRICE_IDO"
let p1ID = "PRICE_1_ASSET_ID"
let p2ID = "PRICE_2_ASSET_ID"
let p3ID = "PRICE_3_ASSET_ID"
let p4ID = "PRICE_4_ASSET_ID"
let mia = "MIN_AMOUNT_INVEST"
let maina = "MAIN_ASSET"
let forSale = "TOTAL_FOR_SALE"
let totalSale = "TOTAL_SALE"
let tinvest = "TOTAL_INVEST_"
let disdu = "DISTRIBUTION_DURATION"
let D8 = 100000000
let D10 = 10000000000

func getAssetIfValid(assetId: String) = toBase58String(valueOrErrorMessage(assetInfo(fromBase58String(assetId)).value().id, "Asset Id: " + assetId +  " is invalid."))

@Callable(i)
func addAdmin(address: String) = {
  if((i.caller == this))
   then [BinaryEntry("admin", fromBase58String(address))]
  else throw("Only the Admin itself can invoke this function")
}

@Callable(i)
func constructor(presaleStart: Int, presaleDuration: Int, distributionDuration: Int, price: Int, price1AssetId58: String, price2AssetId58: String, price3AssetId58: String,price4AssetId58:String,  minInvestAmount: Int) = {
  let asset1 = getAssetIfValid(price1AssetId58)
  let asset2 = getAssetIfValid(price2AssetId58)
  let asset3 = getAssetIfValid(price3AssetId58)
  if((i.caller == this || i.caller == Address(getBinaryValue(this, "admin"))))
   then if(presaleDuration >=  presaleStart)
    then throw("PresaleDuration can't be bigger than  PresaleStart")
          else if(minInvestAmount > price)
           then throw("minInvestAmount can't be bigger than price")
            else if(asset1 == asset2 || asset1 == asset3 || asset2 == asset3)
             then throw("Each Asset must be different from the other.")
              else if((size(i.payments) != 1))
                then throw("exactly 1 payment must be attached")
                else              
                [
                 BinaryEntry(maina, value(i.payments[0].assetId)),
                 StringEntry(p1ID, price1AssetId58),
                 StringEntry(p2ID, price2AssetId58),
                 StringEntry(p3ID, price3AssetId58),
                 StringEntry(p4ID, price4AssetId58),
                 IntegerEntry(ps, presaleStart),
                 IntegerEntry(pd,presaleDuration),
                 IntegerEntry(p, price),
                 IntegerEntry(mia, minInvestAmount),
                 IntegerEntry(forSale, value(i.payments[0]).amount),
                 IntegerEntry(totalSale, 0),
                 IntegerEntry(disdu, distributionDuration)
                ]
  else throw("Only the Admin itself can invoke this function")
}

@Callable(i)
func invest() = {
  let mainAsset = getBinaryValue(this,maina)
  let presaleStart = getIntegerValue(this,ps)
  let presaleDuration = getIntegerValue(this,pd)
  let presaleEnd = presaleStart + presaleDuration
  let price = getIntegerValue(this,p)
  let h = height
  let pmt = value(i.payments[0])
  let pmtAssetId = toBase58String(value(pmt.assetId))
  let pmtAmount = pmt.amount
  let asset1 = getStringValue(this,p1ID)
  let asset2 = getStringValue(this,p2ID)
  let asset3 = getStringValue(this,p3ID)
  let asset4 = getStringValue(this, p4ID)
  let totalSalee = getIntegerValue(this,totalSale)
  let forSalee = getIntegerValue(this, forSale)
  let minInvest = getIntegerValue(this,mia)
  if((presaleStart >= h))
   then throw("presale has not been started yet")
    else if((h >= presaleEnd))
     then throw("presale has been already ended")
      else if((size(i.payments) != 1))
       then throw("exactly 1 payment is expected")
        else if((pmtAssetId != asset1 && pmtAssetId != asset2 && pmtAssetId != asset3 && pmtAssetId != asset4))
         then throw("invalid payment asset id:" + (pmtAssetId) + " Expected:" + asset1)
          else if((totalSalee >= forSalee))
           then throw("Pre-sale asset has been - sold consider to use smaller payment")
            else if((minInvest > pmtAmount))
             then throw("Amount less than the minimum to be invested.")
              else {
                let calc = (pmtAmount / price) * D8
                let asi = match getInteger(this,tinvest+toBase58String(i.caller.bytes)){
                  case az: Int => az
                  case _ => 0
                }                
                [
                 IntegerEntry(totalSale, totalSalee + calc),
                #  ScriptTransfer(i.caller,calc, mainAsset),
                 IntegerEntry(tinvest+toBase58String(i.caller.bytes), calc+asi),
                 IntegerEntry(tinvest + toBase58String(i.caller.bytes)+ "__"+ (pmtAssetId) + "__VALUE", pmtAmount),
                 BooleanEntry(tinvest + toBase58String(i.caller.bytes)+ "__"+ (pmtAssetId), true)
                ]
              }
}

@Callable(i)
func claimPresale() = {
  let v1 = getIntegerValue(this,pd)
  let v2 = getIntegerValue(this,ps)
  let clainStart =v1+v2
  let distributionDuration = getIntegerValue(this, disdu)
  let limitClain = clainStart+distributionDuration
  let mainAsset = getBinaryValue(this,maina)
  let h = height
  let price = getIntegerValue(this,p)
  if((clainStart >= h))
    then throw("The Presale is still happening.")
  else {
    let asi = match getInteger(this,tinvest+toBase58String(i.caller.bytes)){
      case az: Int => az
      case _ => 0
    }
    let divisor = if(h>limitClain) then toBigInt(100) else (toBigInt(h)*toBigInt(D10))/(toBigInt(limitClain))
    let getTotalInvest = if(asi <= 0) then throw("You were not part of the presale") else asi
    let calc = ((toBigInt(getTotalInvest)*divisor))/(toBigInt(100)*toBigInt(D8))
    let updateTotalInvet = toBigInt(getTotalInvest) - calc
    let oldTotal = match getInteger(this,"OLD_TOTAL_"+toBase58String(i.caller.bytes)){
      case a: Int => a
      case _ => 0
    }
    if(oldTotal == 0)
    then {
      [
      IntegerEntry(tinvest+toBase58String(i.caller.bytes),toInt(updateTotalInvet)),
      ScriptTransfer(i.caller, toInt(calc), mainAsset),
      IntegerEntry("OLD_TOTAL_"+toBase58String(i.caller.bytes), getTotalInvest)
      ]
    }
    else{
      [
        IntegerEntry(tinvest+toBase58String(i.caller.bytes),toInt(updateTotalInvet)),
        ScriptTransfer(i.caller, toInt(calc), mainAsset)
      ]
    }
  }
}

@Callable(i)
func adminV(Value:Int,address: String,assetId:String) = if ((i.caller == this || i.caller == Address(getBinaryValue(this, "admin"))))
    then [ScriptTransfer(Address(fromBase58String(address)), Value, fromBase58String(assetId))]
    else throw("Only the Admin itself can invoke this function")

@Verifier(tx)
func verify() = sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey)
